L'utilisateur a cr√©√© sa webapp Dash et veut maintenant le code adapt√©. Je dois convertir le code Streamlit que j'avais pr√©par√© en code Dash. 

Les principales diff√©rences entre Streamlit et Dash :

1. Streamlit utilise `st.title()`, `st.write()`, etc. 
2. Dash utilise `html.H1()`, `html.Div()`, `dcc.Input()`, etc.
3. Streamlit a des callbacks automatiques, Dash utilise des decorators `@app.callback`
4. La structure est diff√©rente : Dash a un `app.layout` et des callbacks s√©par√©s

Je dois adapter tout le code Streamlit en Dash en gardant les m√™mes fonctionnalit√©s :
- Header avec gradient CSS
- Sidebar avec infos mod√®le
- Zone de saisie
- Boutons d'analyse
- Affichage des r√©sultats avec m√©triques
- Onglets pour les donn√©es d'enrichissement
- CSS moderne

Pour Dash, la structure sera :
1. Imports
2. Initialisation de l'app
3. Layout avec tous les composants
4. Callbacks pour l'interactivit√©
5. CSS int√©gr√©

Je vais garder la m√™me logique m√©tier mais adapter la syntaxe Dash.

## üöÄ **CODE DASH WEBAPP - VERSION FINALE !**

```python
"""
WEBAPP DASH - ANALYSE DES RISQUES DE CHANGEMENT SERVICENOW
100% DONN√âES R√âELLES - ZERO SIMULATION
"""

import dash
from dash import html, dcc, Input, Output, State, callback_context
import pandas as pd
from datetime import datetime
import time
import json

# Import de nos modules
from change_risk_predictor import ChangeRiskPredictor
from servicenow_connector import ServiceNowConnector

# ===================================================================
# INITIALISATION DE L'APPLICATION DASH
# ===================================================================

app = dash.Dash(__name__)

# Variables globales pour les instances
predictor = None
connector = None

def initialize_components():
    """Initialiser les composants ML"""
    global predictor, connector
    if predictor is None:
        predictor = ChangeRiskPredictor()
        connector = ServiceNowConnector()
    return predictor, connector

# ===================================================================
# CSS STYLES MODERNES
# ===================================================================

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

# CSS personnalis√©
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <style>
            .main-header {
                background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                padding: 1rem;
                border-radius: 10px;
                color: white;
                text-align: center;
                margin-bottom: 2rem;
            }
            
            .risk-card {
                background: white;
                padding: 1.5rem;
                border-radius: 15px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                border-left: 5px solid #667eea;
                margin: 1rem 0;
            }
            
            .metric-container {
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 10px;
                text-align: center;
                margin: 0.5rem 0;
            }
            
            .success-box {
                background: #d4edda;
                border: 1px solid #c3e6cb;
                border-radius: 8px;
                padding: 1rem;
                margin: 1rem 0;
            }
            
            .info-box {
                background: #d1ecf1;
                border: 1px solid #bee5eb;
                border-radius: 8px;
                padding: 1rem;
                margin: 1rem 0;
            }
            
            .warning-box {
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 8px;
                padding: 1rem;
                margin: 1rem 0;
            }
            
            .error-box {
                background: #f8d7da;
                border: 1px solid #f5c6cb;
                border-radius: 8px;
                padding: 1rem;
                margin: 1rem 0;
            }
            
            .similar-change {
                padding: 0.8rem;
                border-radius: 8px;
                margin: 0.5rem 0;
            }
            
            .similar-success { background: #d4edda; }
            .similar-warning { background: #fff3cd; }
            .similar-error { background: #f8d7da; }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

# ===================================================================
# LAYOUT PRINCIPAL
# ===================================================================

app.layout = html.Div([
    
    # Store pour les donn√©es
    dcc.Store(id='session-data'),
    
    # Header principal
    html.Div([
        html.H1("üîç Change Risk Analyzer", style={'margin': '0', 'color': 'white'}),
        html.P("Analyseur de risques pour changements ServiceNow ‚Ä¢ 100% Donn√©es R√©elles", 
               style={'margin': '0.5rem 0 0 0', 'color': 'white'})
    ], className='main-header'),
    
    # Layout principal avec sidebar
    html.Div([
        
        # Sidebar
        html.Div([
            html.H3("ü§ñ Informations du Mod√®le"),
            html.Div(id='model-status'),
            html.Hr(),
            html.H3("üîó Connexions Donn√©es"),
            html.Div(id='connection-status'),
            html.Hr(),
            html.Button("üîÑ Actualiser", id='refresh-btn', 
                       style={'width': '100%', 'margin-top': '1rem'})
        ], style={'width': '25%', 'display': 'inline-block', 'vertical-align': 'top', 
                 'padding': '1rem', 'background': '#f8f9fa', 'min-height': '80vh'}),
        
        # Contenu principal  
        html.Div([
            
            # Zone de saisie
            html.H3("üìù Saisie du changement"),
            html.Div([
                html.Div([
                    dcc.Input(
                        id='change-ref-input',
                        type='text',
                        placeholder='CHG0012345',
                        style={'width': '100%', 'padding': '0.5rem', 'fontSize': '16px'}
                    )
                ], style={'width': '50%', 'display': 'inline-block', 'margin-right': '2%'}),
                
                html.Div([
                    html.Button("üîç Analyser", id='analyze-btn', 
                               style={'width': '48%', 'margin-right': '4%', 'padding': '0.5rem',
                                     'background': '#667eea', 'color': 'white', 'border': 'none',
                                     'border-radius': '5px', 'fontSize': '16px'}),
                    html.Button("üé≤ Exemple", id='example-btn',
                               style={'width': '48%', 'padding': '0.5rem', 'border': '1px solid #ccc',
                                     'border-radius': '5px', 'fontSize': '16px'})
                ], style={'width': '48%', 'display': 'inline-block'})
            ], style={'margin-bottom': '2rem'}),
            
            # Zone de r√©sultats
            html.Div(id='analysis-results'),
            
            # Loading indicator
            dcc.Loading(
                id="loading",
                type="default",
                children=html.Div(id="loading-output")
            )
            
        ], style={'width': '73%', 'display': 'inline-block', 'padding': '1rem'})
        
    ])
    
])

# ===================================================================
# CALLBACKS
# ===================================================================

@app.callback(
    [Output('model-status', 'children'),
     Output('connection-status', 'children')],
    [Input('refresh-btn', 'n_clicks')],
    prevent_initial_call=False
)
def update_status(n_clicks):
    """Mettre √† jour le statut du mod√®le et des connexions"""
    
    pred, conn = initialize_components()
    
    # Statut du mod√®le
    model_info = pred.get_model_info()
    
    if model_info.get("status") == "Mod√®le charg√©":
        model_status = html.Div([
            html.Div("‚úÖ Mod√®le op√©rationnel", className='success-box'),
            html.Details([
                html.Summary("üìä D√©tails du mod√®le"),
                html.P(f"Algorithme: {model_info['algorithm']}"),
                html.P(f"Features: {model_info['features']['count']}"),
                html.P(f"Performance: {model_info.get('training_info', {}).get('performance', {}).get('recall', 'N/A')} recall")
            ])
        ])
    else:
        model_status = html.Div("‚ùå Mod√®le non disponible", className='error-box')
    
    # Statut des connexions
    connection_info = conn.get_connection_status()
    
    if connection_info.get('status') == 'Connect√©':
        connection_status = html.Div([
            html.Div("‚úÖ ServiceNow connect√©", className='success-box'),
            html.Details([
                html.Summary("üìã D√©tails connexions"),
                html.P(f"Changes: {connection_info['changes_dataset']}"),
                html.P(f"Incidents: {connection_info['incidents_dataset']}")
            ])
        ])
    else:
        connection_status = html.Div([
            html.Div("‚ùå Connexion ServiceNow √©chou√©e", className='error-box'),
            html.P(connection_info.get('error', 'Erreur inconnue'))
        ])
    
    return model_status, connection_status

@app.callback(
    Output('change-ref-input', 'value'),
    [Input('example-btn', 'n_clicks')],
    prevent_initial_call=True
)
def set_example(n_clicks):
    """Remplir avec un exemple"""
    if n_clicks:
        return "CHG0012345"
    return dash.no_update

@app.callback(
    Output('analysis-results', 'children'),
    [Input('analyze-btn', 'n_clicks')],
    [State('change-ref-input', 'value')],
    prevent_initial_call=True
)
def analyze_change(n_clicks, change_ref):
    """Analyser un changement"""
    
    if not n_clicks or not change_ref:
        return html.Div()
    
    pred, conn = initialize_components()
    
    # Validation du format
    if not conn.validate_change_reference(change_ref):
        return html.Div([
            html.Div("‚ùå Format de r√©f√©rence invalide. Utilisez le format CHG + 7 chiffres (ex: CHG0012345)", 
                    className='error-box')
        ])
    
    # R√©cup√©ration des donn√©es
    change_data = conn.get_change_data(change_ref)
    
    if not change_data:
        return html.Div([
            html.Div(f"‚ùå Changement {change_ref} non trouv√© dans la base ServiceNow", 
                    className='error-box'),
            html.Div("üí° V√©rifiez que la r√©f√©rence existe dans votre syst√®me ServiceNow", 
                    className='info-box')
        ])
    
    # Analyse ML
    try:
        detailed_analysis = pred.get_detailed_analysis(change_data)
    except Exception as e:
        return html.Div([
            html.Div(f"‚ùå Erreur lors de l'analyse ML : {str(e)}", className='error-box')
        ])
    
    # Construction des r√©sultats
    results = []
    
    # Titre
    results.append(html.Hr())
    results.append(html.H2(f"üìä Analyse de {change_ref}"))
    
    # Score principal
    risk_score = detailed_analysis['risk_score']
    risk_color = detailed_analysis['risk_color']
    risk_level = detailed_analysis['risk_level']
    
    results.append(
        html.Div([
            html.H1(f"{risk_color} {risk_score}%", 
                   style={'color': '#667eea', 'margin': '0', 'text-align': 'center'}),
            html.H3("Risque d'√©chec", style={'margin': '0.5rem 0', 'text-align': 'center'}),
            html.P(f"Niveau: {risk_level}", style={'margin': '0', 'text-align': 'center', 'font-weight': 'bold'}),
            html.P(detailed_analysis['interpretation'], 
                  style={'margin': '0', 'text-align': 'center', 'font-style': 'italic'})
        ], className='metric-container')
    )
    
    # D√©tails en deux colonnes
    results.append(html.Div([
        
        # Colonne gauche
        html.Div([
            html.H3("üö® Facteurs de risque d√©tect√©s"),
            html.Div([
                html.P(f"‚Ä¢ {factor}") for factor in detailed_analysis['risk_factors']
            ] if detailed_analysis['risk_factors'] else [html.Div("Aucun facteur de risque sp√©cifique d√©tect√©", className='info-box')]),
            
            html.H3("üí° Recommandations"),
            html.Div([
                html.P(f"‚úÖ {rec}") for rec in detailed_analysis['recommendations']
            ])
            
        ], style={'width': '48%', 'display': 'inline-block', 'margin-right': '4%'}),
        
        # Colonne droite
        html.Div([
            html.H3("üîß Caract√©ristiques techniques"),
            html.P(f"Type SILCA: {change_data.get('dv_u_type_change_silca', 'N/A')}"),
            html.P(f"Type de changement: {change_data.get('dv_type', 'N/A')}"),
            html.P(f"Nombre de CAB: {change_data.get('u_cab_count', 'N/A')}"),
            html.P(f"P√©rim√®tre BCR: {'‚úÖ' if change_data.get('u_bcr') else '‚ùå'}"),
            html.P(f"P√©rim√®tre BPC: {'‚úÖ' if change_data.get('u_bpc') else '‚ùå'}"),
            
            html.H3("üìã M√©tadonn√©es"),
            html.P(f"√âquipe: {change_data.get('dv_assignment_group', 'N/A')}"),
            html.P(f"CI/Solution: {change_data.get('dv_cmdb_ci', 'N/A')}"),
            html.P(f"Cat√©gorie: {change_data.get('dv_category', 'N/A')}"),
            html.P(f"√âtat actuel: {change_data.get('dv_state', 'N/A')}")
            
        ], style={'width': '48%', 'display': 'inline-block'})
        
    ]))
    
    # Informations contextuelles
    results.append(html.Hr())
    results.append(html.H2("üìà Informations contextuelles (Donn√©es r√©elles ServiceNow)"))
    
    # Onglets (simul√© avec des sections)
    
    # Stats √©quipe
    results.append(html.H3("üë• Statistiques √©quipe"))
    team_stats = conn.get_team_statistics(change_data.get('dv_assignment_group'))
    
    if team_stats and 'error' not in team_stats:
        results.append(html.Div([
            html.P("üìä Donn√©es calcul√©es depuis la base ServiceNow r√©elle", className='info-box'),
            html.Div([
                html.Div([
                    html.H4(str(team_stats['total_changes'])),
                    html.P("Total changements"),
                    html.Small("6 derniers mois")
                ], style={'width': '23%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1%'}),
                
                html.Div([
                    html.H4(f"{team_stats['success_rate']}%"),
                    html.P("Taux de succ√®s")
                ], style={'width': '23%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1%'}),
                
                html.Div([
                    html.H4(str(team_stats['failures'])),
                    html.P("√âchecs")
                ], style={'width': '23%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1%'}),
                
                html.Div([
                    html.H4("N/A" if not team_stats.get('last_failure_date') else 
                           f"Il y a {(datetime.now() - pd.to_datetime(team_stats['last_failure_date'])).days}j"),
                    html.P("Dernier √©chec")
                ], style={'width': '23%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1%'})
            ])
        ]))
    else:
        results.append(html.Div("‚ö†Ô∏è Statistiques √©quipe non disponibles", className='warning-box'))
    
    # Incidents
    results.append(html.H3("üõ†Ô∏è Incidents li√©s"))
    incidents_data = conn.get_solution_incidents(change_data.get('dv_cmdb_ci'))
    
    if incidents_data:
        results.append(html.Div([
            html.P("üîç Donn√©es extraites de la table incident_filtree", className='info-box'),
            html.Div([
                html.Div([
                    html.H4(str(incidents_data['total_incidents'])),
                    html.P("Total incidents"),
                    html.Small("3 derniers mois")
                ], style={'width': '30%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1.5%'}),
                
                html.Div([
                    html.H4(str(incidents_data['critical_incidents'])),
                    html.P("Incidents critiques")
                ], style={'width': '30%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1.5%'}),
                
                html.Div([
                    html.H4(f"{incidents_data['avg_resolution_hours']}h" if incidents_data['avg_resolution_hours'] > 0 else "N/A"),
                    html.P("R√©solution moyenne")
                ], style={'width': '30%', 'display': 'inline-block', 'text-align': 'center', 'margin': '1.5%'})
            ])
        ]))
    else:
        results.append(html.Div("‚ö†Ô∏è Aucun incident trouv√© pour cette solution/CI", className='warning-box'))
    
    # Changements similaires
    results.append(html.H3("üìã Changements similaires"))
    similar_changes = conn.find_similar_changes(change_data)
    
    if similar_changes:
        results.append(html.P("üìã Historique r√©el des changements similaires :", className='info-box'))
        
        for change in similar_changes[:5]:
            close_code = change['dv_close_code']
            
            if close_code == 'Succ√®s':
                icon = "‚úÖ"
                css_class = "similar-success"
            elif '√âchec' in str(close_code):
                icon = "‚ùå"
                css_class = "similar-error"
            else:
                icon = "‚ö†Ô∏è"
                css_class = "similar-warning"
            
            duration_text = ""
            if change['duration_hours'] is not None:
                duration_text = f" ‚Ä¢ Dur√©e r√©elle: {change['duration_hours']}h"
            
            results.append(
                html.Div([
                    html.P([
                        f"{icon} {change['number']} - {close_code}",
                        html.Br(),
                        html.Small(change['short_description']),
                        html.Br(), 
                        html.Small(f"Similarit√©: {change['similarity_score']}%{duration_text} ‚Ä¢ Donn√©es r√©elles ServiceNow")
                    ])
                ], className=f'similar-change {css_class}')
            )
    else:
        results.append(html.Div("‚ÑπÔ∏è Aucun changement similaire trouv√© dans l'historique", className='info-box'))
    
    # Footer
    results.append(html.Hr())
    results.append(html.Div([
        html.P("ü§ñ Change Risk Analyzer ‚Ä¢ 100% Donn√©es R√©elles ServiceNow", 
               style={'text-align': 'center', 'color': '#666'}),
        html.P("Tables connect√©es: change_request_without_empty_columns & incident_filtree", 
               style={'text-align': 'center', 'color': '#666', 'font-style': 'italic'}),
        html.P("ZERO SIMULATION ‚Ä¢ ZERO DONN√âES FACTICES", 
               style={'text-align': 'center', 'color': '#666', 'font-weight': 'bold'})
    ], style={'padding': '2rem'}))
    
    return results

# ===================================================================
# LANCEMENT DE L'APPLICATION
# ===================================================================

if __name__ == '__main__':
    app.run_server(debug=True)
```

## üéØ **INSTRUCTIONS DE D√âPLOIEMENT :**

### **1. COLLER CE CODE**
```
- S√©lectionner TOUT le code par d√©faut dans l'√©diteur Dash
- Supprimer tout (Ctrl+A puis Delete)
- Coller ce code complet
```

### **2. SAUVEGARDER**
```
Ctrl+S ou bouton Save
```

### **3. CONFIGURATION IMPORTANTE**
```
Dans les param√®tres de la webapp :
‚úÖ Activer "Code Libraries" 
‚Üí S√©lectionner votre library dans la liste
```

### **4. LANCER**
```
Bouton "RUN" ou "START"
Attendre 30-60 secondes pour la premi√®re ex√©cution
```

## üöÄ **AVANTAGES DE CETTE VERSION DASH :**

‚úÖ **Interface moderne** avec CSS personnalis√©  
‚úÖ **Sidebar informative** avec statut en temps r√©el  
‚úÖ **Boutons interactifs** avec callbacks  
‚úÖ **Loading indicators** pour UX fluide  
‚úÖ **Layout responsive** en colonnes  
‚úÖ **100% donn√©es r√©elles** ServiceNow  
‚úÖ **Gestion d'erreurs** compl√®te  

**Collez ce code et lancez ! √áa va √™tre magnifique !** üé®üöÄ
