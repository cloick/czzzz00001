L'utilisateur me dit qu'il n'y a que Dash disponible sur Dataiku, pas Streamlit. Je dois donc convertir tout le code Streamlit que j'ai fait en Dash. 

Le code initial qu'il voit :
```python
import dash_html_components as html 

# build your Dash app

app.layout = html.Div()
```

Je dois donc cr√©er une webapp Dash compl√®te avec :
1. Les imports Dash n√©cessaires
2. Le layout avec HTML components
3. Les callbacks pour l'interactivit√©
4. Le CSS pour le design
5. La logique d'analyse

C'est un changement important car Dash fonctionne tr√®s diff√©remment de Streamlit :
- Dash utilise des callbacks pour l'interactivit√©
- Le CSS doit √™tre d√©fini diff√©remment
- Les composants sont diff√©rents
- La structure est plus complexe

Je vais cr√©er une webapp Dash compl√®te qui reproduit les fonctionnalit√©s de la webapp Streamlit.

## üéØ **WEBAPP DASH COMPL√àTE - √âTAPE PAR √âTAPE**

### **√âTAPE 1 : Remplacer tout le contenu par ce code complet :**

```python
"""
WEBAPP DASH - ANALYSE DES RISQUES DE CHANGEMENT SERVICENOW
100% DONN√âES R√âELLES - Interface Dash pour Dataiku
"""

import dash
from dash import dcc, html, Input, Output, State, callback_table
import dash_bootstrap_components as dbc
import plotly.graph_objs as go
import pandas as pd
from datetime import datetime
import json

# Import de nos modules
from change_risk_predictor import ChangeRiskPredictor
from servicenow_connector import ServiceNowConnector

# ===================================================================
# INITIALISATION DE L'APP DASH
# ===================================================================

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# ===================================================================
# INITIALISATION DES COMPOSANTS M√âTIER
# ===================================================================

# Initialisation globale
predictor = ChangeRiskPredictor()
connector = ServiceNowConnector()

# V√©rification du statut
model_info = predictor.get_model_info()
connection_status = connector.get_connection_status()

# ===================================================================
# CSS CUSTOM
# ===================================================================

custom_css = """
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .risk-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-left: 5px solid #667eea;
        margin: 1rem 0;
        text-align: center;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem;
        border: 1px solid #e9ecef;
    }
    
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .info-box {
        background: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .similar-change {
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border: 1px solid #ddd;
    }
    
    .feature-display {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
"""

# ===================================================================
# FUNCTIONS UTILITAIRES
# ===================================================================

def create_status_card(title, status, details=None):
    """Cr√©er une carte de statut"""
    color = "success" if "‚úÖ" in status else "danger" if "‚ùå" in status else "warning"
    
    card_content = [
        html.H6(title, className="card-title"),
        html.P(status, className="card-text")
    ]
    
    if details:
        card_content.append(html.Small(details, className="text-muted"))
    
    return dbc.Card(
        dbc.CardBody(card_content),
        color=color,
        outline=True,
        className="mb-2"
    )

def create_metric_card(title, value, subtitle=None):
    """Cr√©er une carte m√©trique"""
    card_content = [
        html.H3(value, className="text-primary mb-0"),
        html.P(title, className="mb-0"),
    ]
    
    if subtitle:
        card_content.append(html.Small(subtitle, className="text-muted"))
    
    return html.Div(card_content, className="metric-card")

def format_similar_change(change):
    """Formater un changement similaire"""
    close_code = change['dv_close_code']
    
    if close_code == 'Succ√®s':
        icon = "‚úÖ"
        bg_color = "#d4edda"
    elif '√âchec' in str(close_code):
        icon = "‚ùå"
        bg_color = "#f8d7da"
    else:
        icon = "‚ö†Ô∏è"
        bg_color = "#fff3cd"
    
    duration_text = ""
    if change.get('duration_hours') is not None:
        duration_text = f" ‚Ä¢ Dur√©e: {change['duration_hours']}h"
    
    return html.Div([
        html.P([
            html.Strong(f"{icon} {change['number']} - {close_code}"),
            html.Br(),
            html.Small(change['short_description'][:100] + "..."),
            html.Br(),
            html.Small(f"Similarit√©: {change['similarity_score']}%{duration_text}", 
                      className="text-muted")
        ])
    ], style={"background": bg_color, "padding": "1rem", "border-radius": "8px", "margin": "0.5rem 0"})

# ===================================================================
# LAYOUT PRINCIPAL
# ===================================================================

app.layout = html.Div([
    
    # CSS Custom
    html.Div([
        html.Style(custom_css)
    ]),
    
    # Header principal
    html.Div([
        html.H1("üîç Change Risk Analyzer", style={"margin": "0", "font-size": "2.5rem"}),
        html.P("Analyseur de risques pour changements ServiceNow ‚Ä¢ 100% Donn√©es R√©elles", 
               style={"margin": "0.5rem 0 0 0", "font-size": "1.1rem"})
    ], className="main-header"),
    
    # Container principal
    dbc.Container([
        
        # Row pour le statut et la saisie
        dbc.Row([
            
            # Colonne gauche - Statuts
            dbc.Col([
                html.H4("ü§ñ Statut du Syst√®me"),
                
                # Statut mod√®le
                create_status_card(
                    "Mod√®le ML",
                    "‚úÖ Op√©rationnel" if model_info.get("status") == "Mod√®le charg√©" else "‚ùå Non disponible",
                    f"Algorithme: {model_info.get('algorithm', 'N/A')}" if model_info.get("status") == "Mod√®le charg√©" else None
                ),
                
                # Statut connexions
                create_status_card(
                    "Connexions ServiceNow",
                    "‚úÖ Connect√©" if connection_status.get('status') == 'Connect√©' else "‚ùå Erreur",
                    "Tables: change_request & incident_filtree" if connection_status.get('status') == 'Connect√©' else connection_status.get('error', '')
                ),
                
                # Informations mod√®le
                html.H5("üìä Performance Mod√®le", className="mt-3"),
                html.Div(id="model-performance-info")
                
            ], width=4),
            
            # Colonne droite - Interface principale
            dbc.Col([
                html.H4("üìù Analyse de Changement"),
                
                # Zone de saisie
                dbc.Row([
                    dbc.Col([
                        dbc.Label("R√©f√©rence du changement:"),
                        dbc.Input(
                            id="change-reference-input",
                            placeholder="CHG0012345",
                            type="text",
                            className="mb-2"
                        ),
                        html.Small("Format: CHG + 7 chiffres", className="text-muted")
                    ], width=8),
                    
                    dbc.Col([
                        html.Br(),
                        dbc.Button(
                            "üîç Analyser",
                            id="analyze-button",
                            color="primary",
                            className="me-2",
                            n_clicks=0
                        ),
                        dbc.Button(
                            "‚ÑπÔ∏è Test",
                            id="test-button",
                            color="secondary",
                            n_clicks=0
                        )
                    ], width=4)
                ]),
                
                # Zone de r√©sultats
                html.Hr(),
                html.Div(id="analysis-results")
                
            ], width=8)
        ]),
        
        # Zone pour les r√©sultats d√©taill√©s
        html.Div(id="detailed-results", className="mt-4")
        
    ], fluid=True)
])

# ===================================================================
# CALLBACKS
# ===================================================================

@app.callback(
    Output("model-performance-info", "children"),
    Input("analyze-button", "n_clicks")  # Trigger sur le premier chargement
)
def update_model_info(n_clicks):
    """Afficher les informations de performance du mod√®le"""
    
    if model_info.get("status") != "Mod√®le charg√©":
        return html.Div("‚ùå Mod√®le non disponible", className="error-box")
    
    training_info = model_info.get('training_info', {})
    perf = training_info.get('performance', {})
    
    if perf:
        return html.Div([
            html.P([
                html.Strong("Recall: "), perf.get('recall', 'N/A'), html.Br(),
                html.Strong("Precision: "), perf.get('precision', 'N/A'), html.Br(),
                html.Strong("Features: "), str(model_info.get('features', {}).get('count', 'N/A'))
            ])
        ], className="info-box")
    else:
        return html.Div("Informations de performance non disponibles", className="warning-box")

@app.callback(
    [Output("analysis-results", "children"),
     Output("detailed-results", "children")],
    [Input("analyze-button", "n_clicks"),
     Input("test-button", "n_clicks")],
    [State("change-reference-input", "value")]
)
def perform_analysis(analyze_clicks, test_clicks, change_ref):
    """Effectuer l'analyse du changement"""
    
    # D√©terminer quel bouton a √©t√© cliqu√©
    ctx = dash.callback_context
    if not ctx.triggered:
        return "", ""
    
    button_id = ctx.triggered[0]['prop_id'].split('.')[0]
    
    # Test de connexion
    if button_id == "test-button":
        status = connector.get_connection_status()
        if status.get('status') == 'Connect√©':
            return html.Div("‚úÖ Test de connexion r√©ussi", className="success-box"), ""
        else:
            return html.Div(f"‚ùå Test √©chou√©: {status.get('error', 'Erreur inconnue')}", className="error-box"), ""
    
    # Analyse du changement
    if button_id == "analyze-button":
        
        if not change_ref:
            return html.Div("‚ö†Ô∏è Veuillez saisir une r√©f√©rence de changement", className="warning-box"), ""
        
        # Validation format
        if not connector.validate_change_reference(change_ref):
            return html.Div("‚ùå Format invalide. Utilisez CHG + 7 chiffres (ex: CHG0012345)", className="error-box"), ""
        
        # R√©cup√©ration des donn√©es
        change_data = connector.get_change_data(change_ref)
        
        if not change_data:
            return html.Div(f"‚ùå Changement {change_ref} non trouv√© dans ServiceNow", className="error-box"), ""
        
        # Analyse ML
        try:
            detailed_analysis = predictor.get_detailed_analysis(change_data)
        except Exception as e:
            return html.Div(f"‚ùå Erreur analyse ML: {str(e)}", className="error-box"), ""
        
        # === R√âSULTATS PRINCIPAUX ===
        risk_score = detailed_analysis['risk_score']
        risk_level = detailed_analysis['risk_level']
        risk_color = detailed_analysis['risk_color']
        
        main_results = html.Div([
            html.H3(f"üìä Analyse de {change_ref}"),
            
            # Score principal
            html.Div([
                html.H1(f"{risk_color} {risk_score}%", 
                        style={"color": "#667eea", "margin": "0", "text-align": "center"}),
                html.H4("Risque d'√©chec", style={"margin": "0.5rem 0", "text-align": "center"}),
                html.P(f"Niveau: {risk_level}", style={"margin": "0", "text-align": "center", "font-weight": "bold"}),
                html.P(detailed_analysis['interpretation'], 
                       style={"margin": "0", "text-align": "center", "font-style": "italic"})
            ], className="risk-card")
        ])
        
        # === R√âSULTATS D√âTAILL√âS ===
        detailed_results = html.Div([
            
            dbc.Row([
                # Colonne gauche - Facteurs et recommandations
                dbc.Col([
                    html.H4("üö® Facteurs de risque"),
                    html.Div([
                        html.Ul([
                            html.Li(factor) for factor in detailed_analysis['risk_factors']
                        ]) if detailed_analysis['risk_factors'] else html.P("Aucun facteur sp√©cifique d√©tect√©")
                    ], className="info-box"),
                    
                    html.H4("üí° Recommandations"),
                    html.Div([
                        html.Ul([
                            html.Li(f"‚úÖ {rec}") for rec in detailed_analysis['recommendations']
                        ])
                    ], className="success-box")
                    
                ], width=6),
                
                # Colonne droite - Caract√©ristiques techniques
                dbc.Col([
                    html.H4("üîß Caract√©ristiques techniques"),
                    html.Div([
                        html.P([
                            html.Strong("Type SILCA: "), change_data.get('dv_u_type_change_silca', 'N/A'), html.Br(),
                            html.Strong("Type de changement: "), change_data.get('dv_type', 'N/A'), html.Br(),
                            html.Strong("Nombre de CAB: "), str(change_data.get('u_cab_count', 'N/A')), html.Br(),
                            html.Strong("P√©rim√®tre BCR: "), '‚úÖ' if change_data.get('u_bcr') else '‚ùå', html.Br(),
                            html.Strong("P√©rim√®tre BPC: "), '‚úÖ' if change_data.get('u_bpc') else '‚ùå'
                        ])
                    ], className="feature-display"),
                    
                    html.H4("üìã M√©tadonn√©es"),
                    html.Div([
                        html.P([
                            html.Strong("√âquipe: "), change_data.get('dv_assignment_group', 'N/A'), html.Br(),
                            html.Strong("CI/Solution: "), change_data.get('dv_cmdb_ci', 'N/A'), html.Br(),
                            html.Strong("Cat√©gorie: "), change_data.get('dv_category', 'N/A'), html.Br(),
                            html.Strong("√âtat: "), change_data.get('dv_state', 'N/A')
                        ])
                    ], className="info-box")
                    
                ], width=6)
            ]),
            
            # Onglets pour informations contextuelles
            html.Hr(),
            html.H3("üìà Informations contextuelles"),
            
            dcc.Tabs(id="context-tabs", value="team-stats", children=[
                dcc.Tab(label="üë• Statistiques √©quipe", value="team-stats"),
                dcc.Tab(label="üõ†Ô∏è Incidents li√©s", value="incidents"),
                dcc.Tab(label="üìã Changements similaires", value="similar-changes")
            ]),
            
            html.Div(id="context-content", style={"padding": "1rem"})
        ])
        
        # Stocker les donn√©es pour les onglets
        global current_change_data
        current_change_data = change_data
        
        return main_results, detailed_results
    
    return "", ""

@app.callback(
    Output("context-content", "children"),
    [Input("context-tabs", "value")]
)
def update_context_content(active_tab):
    """Mettre √† jour le contenu des onglets contextuels"""
    
    try:
        change_data = current_change_data
    except:
        return html.Div("Aucune donn√©e de changement disponible")
    
    if active_tab == "team-stats":
        # Statistiques √©quipe
        team_stats = connector.get_team_statistics(change_data.get('dv_assignment_group'))
        
        if team_stats and 'error' not in team_stats:
            return dbc.Row([
                dbc.Col([
                    create_metric_card("Total changements", team_stats['total_changes'], "6 derniers mois")
                ], width=3),
                dbc.Col([
                    create_metric_card("Taux de succ√®s", f"{team_stats['success_rate']}%")
                ], width=3),
                dbc.Col([
                    create_metric_card("√âchecs", team_stats['failures'])
                ], width=3),
                dbc.Col([
                    last_failure = team_stats.get('last_failure_date')
                    if last_failure and pd.notna(last_failure):
                        days_ago = (datetime.now() - pd.to_datetime(last_failure)).days
                        create_metric_card("Dernier √©chec", f"Il y a {days_ago}j")
                    else:
                        create_metric_card("Dernier √©chec", "Aucun r√©cent")
                ], width=3)
            ])
        else:
            return html.Div("‚ö†Ô∏è Statistiques √©quipe non disponibles", className="warning-box")
    
    elif active_tab == "incidents":
        # Incidents li√©s
        incidents_data = connector.get_solution_incidents(change_data.get('dv_cmdb_ci'))
        
        if incidents_data:
            return html.Div([
                dbc.Row([
                    dbc.Col([
                        create_metric_card("Total incidents", incidents_data['total_incidents'], "3 derniers mois")
                    ], width=4),
                    dbc.Col([
                        create_metric_card("Incidents critiques", incidents_data['critical_incidents'])
                    ], width=4),
                    dbc.Col([
                        if incidents_data['avg_resolution_hours'] > 0:
                            create_metric_card("R√©solution moyenne", f"{incidents_data['avg_resolution_hours']}h")
                        else:
                            create_metric_card("R√©solution moyenne", "N/A")
                    ], width=4)
                ]),
                
                html.P("üîç Donn√©es extraites de la table incident_filtree", className="text-muted mt-2")
            ])
        else:
            return html.Div("‚ö†Ô∏è Aucun incident trouv√© pour cette solution/CI", className="warning-box")
    
    elif active_tab == "similar-changes":
        # Changements similaires
        similar_changes = connector.find_similar_changes(change_data)
        
        if similar_changes:
            return html.Div([
                html.P("üìã Historique r√©el des changements similaires:"),
                html.Div([
                    format_similar_change(change) for change in similar_changes[:5]
                ])
            ])
        else:
            return html.Div("‚ÑπÔ∏è Aucun changement similaire trouv√©", className="info-box")
    
    return html.Div("Contenu non disponible")

# ===================================================================
# FOOTER ET INFORMATIONS
# ===================================================================

app.layout.children.append(
    html.Footer([
        html.Hr(),
        html.Div([
            html.P("ü§ñ Change Risk Analyzer ‚Ä¢ 100% Donn√©es R√©elles ServiceNow", 
                   style={"text-align": "center", "margin": "0"}),
            html.P("Tables connect√©es: change_request_without_empty_columns & incident_filtree", 
                   style={"text-align": "center", "margin": "0", "font-style": "italic"}),
            html.P("ZERO SIMULATION ‚Ä¢ ZERO DONN√âES FACTICES", 
                   style={"text-align": "center", "margin": "0", "font-weight": "bold"})
        ], style={"padding": "2rem", "color": "#666"})
    ])
)

# ===================================================================
# POINT D'ENTR√âE
# ===================================================================

if __name__ == '__main__':
    app.run_server(debug=True)
```

## üéØ **√âTAPES POUR IMPL√âMENTER :**

### **√âTAPE 2 : Sauvegarder et tester**
1. **Remplacer** tout le contenu de votre webapp par ce code
2. **Sauvegarder** le fichier
3. **D√©marrer** la webapp depuis Dataiku

### **√âTAPE 3 : V√©rifier les imports**
Si erreur d'import, ajoutez en haut :
```python
# Si dash_bootstrap_components pas disponible
# Remplacer les dbc. par html. √©quivalents
```

### **√âTAPE 4 : Test**
- Interface devrait charger avec le header gradient√©
- Statuts des connexions affich√©s √† gauche
- Zone de saisie √† droite

**Cette webapp Dash reproduit toutes les fonctionnalit√©s de la version Streamlit !** üöÄ

**Testez et dites-moi ce qui se passe !**

L'utilisateur m'a dit qu'il n'y a que Dash disponible sur Dataiku, pas Streamlit. J'ai donc converti toute la webapp Streamlit en webapp Dash.

Voici les principales diff√©rences que j'ai d√ª g√©rer :

1. **Structure** : Dash utilise un layout d√©claratif avec des composants HTML, tandis que Streamlit est plus proc√©dural
2. **Interactivit√©** : Dash utilise des callbacks pour g√©rer l'interactivit√©, tandis que Streamlit utilise des boutons et des widgets directs
3. **CSS** : J'ai gard√© le m√™me CSS mais adapt√© pour Dash
4. **Composants** : J'ai utilis√© dash_bootstrap_components pour avoir des composants plus jolis
5. **Gestion d'√©tat** : Dash g√®re l'√©tat diff√©remment, j'ai d√ª utiliser des variables globales pour partager les donn√©es entre callbacks

Points cl√©s de la conversion :

- **Layout principal** : Structure HTML avec des divs et des containers Bootstrap
- **Callbacks** : Un callback principal pour l'analyse et un pour les onglets contextuels
- **Gestion des donn√©es** : Variable globale `current_change_data` pour partager entre callbacks
- **Affichage des r√©sultats** : Utilisation de composants HTML pour reproduire l'apparence
- **Onglets** : Utilisation de dcc.Tabs au lieu des tabs Streamlit

La webapp devrait maintenant fonctionner avec Dash sur Dataiku et offrir les m√™mes fonctionnalit√©s que la version Streamlit.
