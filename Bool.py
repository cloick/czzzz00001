L'utilisateur me dit que les statuts √† gauche sont fig√©s sur "V√©rification..." et "Chargement..." ce qui indique qu'il y a un probl√®me avec les appels API au d√©marrage. Les √©l√©ments ne se mettent pas √† jour, ce qui sugg√®re que les appels vers get_model_status et get_connection_status ne fonctionnent pas ou ne retournent pas de donn√©es.

Il veut aussi corriger le format qui n'est pas CAGUPCHG mais CAGIPCHG0290677.

Je vais commencer par le fichier JavaScript car c'est probablement l√† que le probl√®me se situe - les appels API au d√©marrage ne se font pas ou ne mettent pas √† jour l'interface.

Puis il faudra corriger le format dans tous les fichiers.

## üîß **OUI, C'EST UN PROBL√àME ! Les appels API ne se font pas correctement.**

**Commen√ßons par le fichier JAVASCRIPT car c'est l√† que le probl√®me se situe.**

**Format corrig√© : CAGIPCHG0290677**

---

## ‚ö° **ONGLET JAVASCRIPT - VERSION CORRIG√âE COMPL√àTE :**

```javascript
// ===================================================================
// CHANGE RISK ANALYZER - LOGIQUE FRONTEND
// ===================================================================

// Variables globales
let currentChangeData = null;
let activeTab = 'team';

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initialisation de Change Risk Analyzer');
    initializeApp();
    setupEventListeners();
    
    // D√©marrer la v√©rification du statut apr√®s un court d√©lai
    setTimeout(() => {
        checkSystemStatus();
    }, 1000);
});

// ===================================================================
// INITIALISATION
// ===================================================================

function initializeApp() {
    console.log('üöÄ Initialisation de Change Risk Analyzer');
    
    // Afficher un message de bienvenue
    showToast('Bienvenue dans Change Risk Analyzer', 'success');
    
    // Mettre √† jour l'interface avec les √©tats de chargement
    updateLoadingStates();
}

function updateLoadingStates() {
    // Mettre les √©l√©ments en √©tat de chargement
    const modelStatus = document.getElementById('model-status-text');
    const connectionStatus = document.getElementById('connection-status-text');
    const performance = document.getElementById('model-performance');
    
    if (modelStatus) modelStatus.textContent = 'üîÑ V√©rification...';
    if (connectionStatus) connectionStatus.textContent = 'üîÑ V√©rification...';
    if (performance) performance.innerHTML = '<p>üîÑ Chargement...</p>';
}

function setupEventListeners() {
    // Bouton analyser
    const analyzeBtn = document.getElementById('analyze-btn');
    if (analyzeBtn) {
        analyzeBtn.addEventListener('click', analyzeChange);
    }
    
    // Bouton test
    const testBtn = document.getElementById('test-btn');
    if (testBtn) {
        testBtn.addEventListener('click', testConnection);
    }
    
    // Input changement (validation en temps r√©el)
    const changeInput = document.getElementById('change-ref');
    if (changeInput) {
        changeInput.addEventListener('input', function() {
            // Auto-majuscules
            this.value = this.value.toUpperCase();
            validateChangeReference();
        });
        
        // Touche Entr√©e pour lancer l'analyse
        changeInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                analyzeChange();
            }
        });
    }
}

// ===================================================================
// FONCTIONS UTILITAIRES
// ===================================================================

function showLoading(message = 'Chargement...') {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        const spinner = overlay.querySelector('.loading-spinner p');
        if (spinner) {
            spinner.textContent = message;
        }
        overlay.style.display = 'flex';
    }
}

function hideLoading() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

function showToast(message, type = 'success') {
    const container = document.getElementById('toast-container');
    if (!container) return;
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 1.2rem; cursor: pointer;">&times;</button>
        </div>
    `;
    
    container.appendChild(toast);
    
    // Auto-suppression apr√®s 5 secondes
    setTimeout(() => {
        if (toast.parentElement) {
            toast.remove();
        }
    }, 5000);
}

function validateChangeReference() {
    const input = document.getElementById('change-ref');
    if (!input) return false;
    
    const value = input.value.toUpperCase();
    const pattern = /^CAGIPCHG\d{7}$/;  // ‚Üê FORMAT CORRIG√â
    
    // Supprimer les classes pr√©c√©dentes
    input.classList.remove('valid', 'invalid');
    
    if (!value) {
        input.style.borderColor = '#e9ecef';
        return true; // Vide = OK
    }
    
    if (pattern.test(value)) {
        input.classList.add('valid');
        input.style.borderColor = '#28a745';
        return true;
    } else {
        input.classList.add('invalid');
        input.style.borderColor = '#dc3545';
        return false;
    }
}

// ===================================================================
// API CALLS
// ===================================================================

async function apiCall(endpoint, params = {}) {
    try {
        console.log(`üîó Appel API: ${endpoint}`, params);
        
        const url = new URL(getWebAppBackendUrl(endpoint));
        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
        
        console.log(`üì° URL: ${url.toString()}`);
        
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log(`üì• R√©ponse ${endpoint}:`, data);
        
        if (data.status === 'error') {
            throw new Error(data.message || 'Erreur inconnue');
        }
        
        return data;
        
    } catch (error) {
        console.error(`‚ùå Erreur API ${endpoint}:`, error);
        throw error;
    }
}

// ===================================================================
// FONCTIONS PRINCIPALES
// ===================================================================

async function checkSystemStatus() {
    console.log('üîç V√©rification du statut syst√®me...');
    
    try {
        // V√©rifier le statut du mod√®le
        console.log('üìä V√©rification du mod√®le...');
        const modelStatus = await apiCall('get_model_status');
        updateModelStatus(modelStatus);
        
        // V√©rifier le statut des connexions
        console.log('üîó V√©rification des connexions...');
        const connectionStatus = await apiCall('get_connection_status');
        updateConnectionStatus(connectionStatus);
        
        console.log('‚úÖ V√©rification du statut termin√©e');
        
    } catch (error) {
        console.error('‚ùå Erreur v√©rification statut:', error);
        showToast('Erreur lors de la v√©rification du statut syst√®me', 'error');
        
        // Mettre en erreur les statuts
        updateModelStatusError(error.message);
        updateConnectionStatusError(error.message);
    }
}

function updateModelStatus(status) {
    console.log('üìä Mise √† jour statut mod√®le:', status);
    
    const statusCard = document.getElementById('model-status');
    const statusText = document.getElementById('model-status-text');
    const details = document.getElementById('model-details');
    const performance = document.getElementById('model-performance');
    
    if (!statusCard || !statusText || !performance) {
        console.error('‚ùå √âl√©ments DOM manquants pour le statut mod√®le');
        return;
    }
    
    if (status.data && status.data.status === 'Mod√®le charg√©') {
        statusCard.className = 'status-card status-success';
        statusText.textContent = '‚úÖ Op√©rationnel';
        if (details) {
            details.textContent = `Algorithme: ${status.data.algorithm}`;
        }
        
        // Performance
        const perf = status.data.training_info?.performance || {};
        performance.innerHTML = `
            <p><strong>Recall:</strong> ${perf.recall || 'N/A'}</p>
            <p><strong>Precision:</strong> ${perf.precision || 'N/A'}</p>
            <p><strong>Features:</strong> ${status.data.features?.count || 'N/A'}</p>
        `;
    } else {
        statusCard.className = 'status-card status-error';
        statusText.textContent = '‚ùå Non disponible';
        if (details) {
            details.textContent = 'Mod√®le non charg√©';
        }
        performance.innerHTML = '<p>‚ùå Non disponible</p>';
    }
}

function updateModelStatusError(errorMsg) {
    const statusCard = document.getElementById('model-status');
    const statusText = document.getElementById('model-status-text');
    const details = document.getElementById('model-details');
    const performance = document.getElementById('model-performance');
    
    if (statusCard) statusCard.className = 'status-card status-error';
    if (statusText) statusText.textContent = '‚ùå Erreur';
    if (details) details.textContent = errorMsg;
    if (performance) performance.innerHTML = '<p>‚ùå Erreur de chargement</p>';
}

function updateConnectionStatus(status) {
    console.log('üîó Mise √† jour statut connexion:', status);
    
    const statusCard = document.getElementById('connection-status');
    const statusText = document.getElementById('connection-status-text');
    const details = document.getElementById('connection-details');
    
    if (!statusCard || !statusText) {
        console.error('‚ùå √âl√©ments DOM manquants pour le statut connexion');
        return;
    }
    
    if (status.data && status.data.status === 'Connect√©') {
        statusCard.className = 'status-card status-success';
        statusText.textContent = '‚úÖ Connect√©';
        if (details) {
            details.textContent = 'Tables: change_request & incident_filtree';
        }
    } else {
        statusCard.className = 'status-card status-error';
        statusText.textContent = '‚ùå Erreur';
        if (details) {
            details.textContent = status.data?.error || 'Erreur de connexion';
        }
    }
}

function updateConnectionStatusError(errorMsg) {
    const statusCard = document.getElementById('connection-status');
    const statusText = document.getElementById('connection-status-text');
    const details = document.getElementById('connection-details');
    
    if (statusCard) statusCard.className = 'status-card status-error';
    if (statusText) statusText.textContent = '‚ùå Erreur';
    if (details) details.textContent = errorMsg;
}

async function testConnection() {
    try {
        showLoading('Test des connexions...');
        
        const result = await apiCall('test_connection');
        
        hideLoading();
        
        if (result.data && result.data.success) {
            showToast('‚úÖ Test de connexion r√©ussi', 'success');
        } else {
            showToast('‚ùå Test de connexion √©chou√©', 'error');
        }
        
    } catch (error) {
        hideLoading();
        showToast(`‚ùå Erreur de test: ${error.message}`, 'error');
    }
}

async function analyzeChange() {
    const changeRef = document.getElementById('change-ref').value.trim().toUpperCase();
    
    // Validation
    if (!changeRef) {
        showToast('‚ö†Ô∏è Veuillez saisir une r√©f√©rence de changement', 'warning');
        return;
    }
    
    if (!validateChangeReference()) {
        showToast('‚ùå Format invalide. Utilisez CAGIPCHG + 7 chiffres', 'error');  // ‚Üê FORMAT CORRIG√â
        return;
    }
    
    try {
        showLoading(`Analyse de ${changeRef} en cours...`);
        
        // Appel API pour analyser le changement
        const result = await apiCall('analyze_change', { change_ref: changeRef });
        
        hideLoading();
        
        if (result.data && result.data.change_found) {
            currentChangeData = result.data;
            displayAnalysisResults(result.data);
            showToast(`‚úÖ Analyse de ${changeRef} termin√©e`, 'success');
        } else {
            showToast(`‚ùå Changement ${changeRef} non trouv√©`, 'error');
            clearResults();
        }
        
    } catch (error) {
        hideLoading();
        showToast(`‚ùå Erreur d'analyse: ${error.message}`, 'error');
        clearResults();
    }
}

// ===================================================================
// AFFICHAGE DES R√âSULTATS
// ===================================================================

function displayAnalysisResults(data) {
    displayMainResults(data);
    displayDetailedResults(data);
}

function displayMainResults(data) {
    const resultsDiv = document.getElementById('analysis-results');
    if (!resultsDiv) return;
    
    const analysis = data.detailed_analysis;
    
    resultsDiv.innerHTML = `
        <div class="text-center mb-3">
            <h3><i class="fas fa-chart-pie"></i> Analyse de ${data.change_ref}</h3>
        </div>
        
        <div class="risk-card">
            <div class="risk-score">${analysis.risk_color} ${analysis.risk_score}%</div>
            <div class="risk-level">Risque d'√©chec</div>
            <div class="risk-level">Niveau: ${analysis.risk_level}</div>
            <div class="risk-interpretation">${analysis.interpretation}</div>
        </div>
    `;
}

function displayDetailedResults(data) {
    const detailedDiv = document.getElementById('detailed-results');
    if (!detailedDiv) return;
    
    const analysis = data.detailed_analysis;
    const change = data.change_data;
    
    detailedDiv.innerHTML = `
        <div class="details-grid">
            <!-- Colonne gauche -->
            <div class="details-section">
                <h4><i class="fas fa-exclamation-triangle"></i> Facteurs de risque</h4>
                <div class="warning-box">
                    ${analysis.risk_factors.length > 0 ? 
                        '<ul>' + analysis.risk_factors.map(factor => `<li>${factor}</li>`).join('') + '</ul>' :
                        '<p>Aucun facteur sp√©cifique d√©tect√©</p>'
                    }
                </div>
                
                <h4><i class="fas fa-lightbulb"></i> Recommandations</h4>
                <div class="success-box">
                    <ul>
                        ${analysis.recommendations.map(rec => `<li>‚úÖ ${rec}</li>`).join('')}
                    </ul>
                </div>
            </div>
            
            <!-- Colonne droite -->
            <div class="details-section">
                <h4><i class="fas fa-cogs"></i> Caract√©ristiques techniques</h4>
                <div class="features-list">
                    <p><strong>Type SILCA:</strong> <span>${change.dv_u_type_change_silca || 'N/A'}</span></p>
                    <p><strong>Type de changement:</strong> <span>${change.dv_type || 'N/A'}</span></p>
                    <p><strong>Nombre de CAB:</strong> <span>${change.u_cab_count || 'N/A'}</span></p>
                    <p><strong>P√©rim√®tre BCR:</strong> <span>${change.u_bcr ? '‚úÖ' : '‚ùå'}</span></p>
                    <p><strong>P√©rim√®tre BPC:</strong> <span>${change.u_bpc ? '‚úÖ' : '‚ùå'}</span></p>
                </div>
                
                <h4><i class="fas fa-clipboard-list"></i> M√©tadonn√©es</h4>
                <div class="info-box">
                    <p><strong>√âquipe:</strong> ${change.dv_assignment_group || 'N/A'}</p>
                    <p><strong>CI/Solution:</strong> ${change.dv_cmdb_ci || 'N/A'}</p>
                    <p><strong>Cat√©gorie:</strong> ${change.dv_category || 'N/A'}</p>
                    <p><strong>√âtat:</strong> ${change.dv_state || 'N/A'}</p>
                </div>
            </div>
        </div>
        
        <!-- Onglets contextuels -->
        <div class="tabs-container">
            <hr>
            <h3><i class="fas fa-chart-line"></i> Informations contextuelles</h3>
            <p style="color: #666; font-style: italic;"><i class="fas fa-database"></i> Donn√©es extraites des tables ServiceNow r√©elles</p>
            
            <div class="tabs-buttons">
                <button class="btn-tab active" onclick="switchTab('team')">
                    <i class="fas fa-users"></i> Statistiques √©quipe
                </button>
                <button class="btn-tab" onclick="switchTab('incidents')">
                    <i class="fas fa-tools"></i> Incidents li√©s
                </button>
                <button class="btn-tab" onclick="switchTab('similar')">
                    <i class="fas fa-clipboard-list"></i> Changements similaires
                </button>
            </div>
            
            <div id="tab-content" class="tab-content">
                <p style="text-align: center; color: #666; padding: 2rem;">
                    <i class="fas fa-mouse-pointer"></i> Cliquez sur un onglet pour voir les informations contextuelles
                </p>
            </div>
        </div>
    `;
}

async function switchTab(tabName) {
    if (!currentChangeData) return;
    
    activeTab = tabName;
    
    // Mettre √† jour les boutons
    document.querySelectorAll('.btn-tab').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    const contentDiv = document.getElementById('tab-content');
    if (!contentDiv) return;
    
    try {
        showLoading('Chargement des donn√©es contextuelles...');
        
        let result;
        
        switch(tabName) {
            case 'team':
                result = await apiCall('get_team_stats', { 
                    assignment_group: currentChangeData.change_data.dv_assignment_group 
                });
                displayTeamStats(result.data);
                break;
                
            case 'incidents':
                result = await apiCall('get_incidents', { 
                    cmdb_ci: currentChangeData.change_data.dv_cmdb_ci 
                });
                displayIncidents(result.data);
                break;
                
            case 'similar':
                result = await apiCall('get_similar_changes', { 
                    change_ref: currentChangeData.change_ref 
                });
                displaySimilarChanges(result.data);
                break;
        }
        
        hideLoading();
        
    } catch (error) {
        hideLoading();
        const contentDiv = document.getElementById('tab-content');
        if (contentDiv) {
            contentDiv.innerHTML = `
                <div class="error-box">
                    <p><i class="fas fa-exclamation-circle"></i> Erreur lors du chargement: ${error.message}</p>
                </div>
            `;
        }
    }
}

function displayTeamStats(stats) {
    const contentDiv = document.getElementById('tab-content');
    if (!contentDiv) return;
    
    if (stats && !stats.error) {
        const lastFailureText = stats.last_failure_date ? 
            `Il y a ${Math.floor((new Date() - new Date(stats.last_failure_date)) / (1000 * 60 * 60 * 24))} jours` :
            'Aucun r√©cent';
        
        contentDiv.innerHTML = `
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">${stats.total_changes}</div>
                    <div class="metric-title">Total changements</div>
                    <div class="metric-subtitle">6 derniers mois</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${stats.success_rate}%</div>
                    <div class="metric-title">Taux de succ√®s</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${stats.failures}</div>
                    <div class="metric-title">√âchecs</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${lastFailureText}</div>
                    <div class="metric-title">Dernier √©chec</div>
                </div>
            </div>
        `;
    } else {
        contentDiv.innerHTML = `
            <div class="warning-box">
                <p><i class="fas fa-exclamation-triangle"></i> Statistiques √©quipe non disponibles</p>
            </div>
        `;
    }
}

function displayIncidents(incidents) {
    const contentDiv = document.getElementById('tab-content');
    if (!contentDiv) return;
    
    if (incidents) {
        const resolutionText = incidents.avg_resolution_hours > 0 ? 
            `${incidents.avg_resolution_hours}h` : 'N/A';
        
        contentDiv.innerHTML = `
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">${incidents.total_incidents}</div>
                    <div class="metric-title">Total incidents</div>
                    <div class="metric-subtitle">3 derniers mois</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${incidents.critical_incidents}</div>
                    <div class="metric-title">Incidents critiques</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${resolutionText}</div>
                    <div class="metric-title">R√©solution moyenne</div>
                </div>
            </div>
            <p style="text-align: center; color: #666; margin-top: 1rem;">
                <i class="fas fa-database"></i> Donn√©es extraites de la table incident_filtree
            </p>
        `;
    } else {
        contentDiv.innerHTML = `
            <div class="warning-box">
                <p><i class="fas fa-exclamation-triangle"></i> Aucun incident trouv√© pour cette solution/CI</p>
            </div>
        `;
    }
}

function displaySimilarChanges(similar) {
    const contentDiv = document.getElementById('tab-content');
    if (!contentDiv) return;
    
    if (similar && similar.length > 0) {
        const changesHtml = similar.map(change => {
            const closeCode = change.dv_close_code;
            let className = 'similar-change ';
            let icon = '';
            
            if (closeCode === 'Succ√®s') {
                className += 'success';
                icon = '‚úÖ';
            } else if (closeCode && closeCode.includes('√âchec')) {
                className += 'error';
                icon = '‚ùå';
            } else {
                className += 'warning';
                icon = '‚ö†Ô∏è';
            }
            
            const durationText = change.duration_hours ? 
                ` ‚Ä¢ Dur√©e: ${change.duration_hours}h` : '';
            
            return `
                <div class="${className}">
                    <p>
                        <strong>${icon} ${change.number} - ${closeCode}</strong><br>
                        <small>${change.short_description.substring(0, 100)}...</small><br>
                        <small style="color: #666;">
                            Similarit√©: ${change.similarity_score}%${durationText}
                        </small>
                    </p>
                </div>
            `;
        }).join('');
        
        contentDiv.innerHTML = `
            <p><i class="fas fa-clipboard-list"></i> <strong>Historique r√©el des changements similaires:</strong></p>
            ${changesHtml}
        `;
    } else {
        contentDiv.innerHTML = `
            <div class="info-box">
                <p><i class="fas fa-info-circle"></i> Aucun changement similaire trouv√© dans l'historique</p>
            </div>
        `;
    }
}

function clearResults() {
    const analysisResults = document.getElementById('analysis-results');
    const detailedResults = document.getElementById('detailed-results');
    
    if (analysisResults) analysisResults.innerHTML = '';
    if (detailedResults) detailedResults.innerHTML = '';
    
    currentChangeData = null;
}

// ===================================================================
// FONCTION UTILITAIRE POUR EXEMPLE
// ===================================================================

function setExampleChange() {
    const input = document.getElementById('change-ref');
    if (input) {
        input.value = 'CAGIPCHG0290677';  // ‚Üê FORMAT CORRIG√â
        validateChangeReference();
    }
}

// ===================================================================
// DEBUG
// ===================================================================

// Fonction de debug pour tester les appels API
window.debugAPI = async function(endpoint) {
    try {
        console.log(`üß™ Test debug: ${endpoint}`);
        const result = await apiCall(endpoint);
        console.log('‚úÖ R√©sultat:', result);
        return result;
    } catch (error) {
        console.error('‚ùå Erreur debug:', error);
        return error;
    }
};
```

**Ce fichier JavaScript corrig√© devrait r√©soudre le probl√®me des statuts fig√©s !**

**Le format est maintenant CAGIPCHG0290677 partout.**

**Voulez-vous que je continue avec le fichier HTML ensuite ?** üöÄ
