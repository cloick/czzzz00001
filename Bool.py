Parfait ! Attaquons l'encodage ! üöÄüîç √âTAPE 1 : ANALYSER LES TYPES DE VARIABLES# Identifier les diff√©rents types de variables √† encoder
print("=== ANALYSE TYPES DE VARIABLES ===")

# Variables object (cat√©gorielles)
categorical_cols = X_train.select_dtypes(include=['object']).columns.tolist()
print(f"Variables cat√©gorielles: {len(categorical_cols)}")

# Analyser la cardinalit√© de chaque variable cat√©gorielle
print("\nCARDINALIT√â DES VARIABLES CAT√âGORIELLES:")
cardinalite_info = []

for col in categorical_cols:
    n_unique = X_train[col].nunique()
    n_missing = X_train[col].isnull().sum()
    cardinalite_info.append({
        'colonne': col,
        'cardinalite': n_unique,
        'missing': n_missing,
        'top_values': X_train[col].value_counts().head(3).to_dict()
    })
    print(f"{col:30s} | {n_unique:4d} cat√©gories | {n_missing:4d} manquants")

# S√©parer par cardinalit√©
low_cardinality = [info['colonne'] for info in cardinalite_info if info['cardinalite'] <= 10]
medium_cardinality = [info['colonne'] for info in cardinalite_info if 10 < info['cardinalite'] <= 50]
high_cardinality = [info['colonne'] for info in cardinalite_info if info['cardinalite'] > 50]

print(f"\nüìä R√âPARTITION:")
print(f"Faible cardinalit√© (‚â§10): {len(low_cardinality)} ‚Üí {low_cardinality}")
print(f"Moyenne cardinalit√© (11-50): {len(medium_cardinality)} ‚Üí {medium_cardinality}")
print(f"Haute cardinalit√© (>50): {len(high_cardinality)} ‚Üí {high_cardinality}")

# Variables num√©riques et bool√©ennes (d√©j√† OK)
numeric_cols = X_train.select_dtypes(include=[np.number]).columns.tolist()
bool_cols = X_train.select_dtypes(include=['bool']).columns.tolist()

print(f"\n‚úÖ Variables num√©riques (OK): {len(numeric_cols)}")
print(f"‚úÖ Variables bool√©ennes (OK): {len(bool_cols)}")üéØ √âTAPE 2 : STRAT√âGIE D'ENCODAGE PAR CARDINALIT√âfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
import pandas as pd

print("\n=== STRAT√âGIES D'ENCODAGE ===")

# STRAT√âGIE 1: OneHot pour faible cardinalit√©
print(f"OneHot Encoding: {low_cardinality}")

# STRAT√âGIE 2: Label Encoding pour moyenne cardinalit√©  
print(f"Label Encoding: {medium_cardinality}")

# STRAT√âGIE 3: Target Encoding ou regroupement pour haute cardinalit√©
print(f"Traitement sp√©cial: {high_cardinality}")üîß √âTAPE 3 : IMPL√âMENTATION ENCODAGE# Copier les datasets pour pr√©server originaux
X_train_encoded = X_train.copy()
X_test_encoded = X_test.copy()

# 1. ONEHOT ENCODING (faible cardinalit√©)
if low_cardinality:
    print("üîÑ OneHot Encoding...")
    for col in low_cardinality:
        # Cr√©er dummies
        train_dummies = pd.get_dummies(X_train_encoded[col], prefix=col, dummy_na=True)
        test_dummies = pd.get_dummies(X_test_encoded[col], prefix=col, dummy_na=True)
        
        # Aligner les colonnes (train et test doivent avoir m√™mes colonnes)
        all_columns = train_dummies.columns.union(test_dummies.columns)
        
        for dummy_col in all_columns:
            if dummy_col not in train_dummies.columns:
                train_dummies[dummy_col] = 0
            if dummy_col not in test_dummies.columns:
                test_dummies[dummy_col] = 0
        
        # R√©organiser dans m√™me ordre
        train_dummies = train_dummies[all_columns]
        test_dummies = test_dummies[all_columns]
        
        # Ajouter au dataset et supprimer colonne originale
        X_train_encoded = pd.concat([X_train_encoded.drop(col, axis=1), train_dummies], axis=1)
        X_test_encoded = pd.concat([X_test_encoded.drop(col, axis=1), test_dummies], axis=1)
        
        print(f"  ‚úÖ {col}: {len(all_columns)} nouvelles colonnes")

# 2. LABEL ENCODING (moyenne cardinalit√©)
if medium_cardinality:
    print("üîÑ Label Encoding...")
    for col in medium_cardinality:
        le = LabelEncoder()
        
        # Fit sur train seulement
        X_train_encoded[f'{col}_encoded'] = le.fit_transform(X_train_encoded[col].astype(str))
        
        # Transform test (g√©rer les nouvelles cat√©gories)
        test_labels = []
        for value in X_test_encoded[col].astype(str):
            if value in le.classes_:
                test_labels.append(le.transform([value])[0])
            else:
                test_labels.append(-1)  # Cat√©gorie inconnue
        
        X_test_encoded[f'{col}_encoded'] = test_labels
        
        # Supprimer colonne originale
        X_train_encoded = X_train_encoded.drop(col, axis=1)
        X_test_encoded = X_test_encoded.drop(col, axis=1)
        
        print(f"  ‚úÖ {col}: encod√© en num√©rique")

print(f"\nüéØ Shape final:")
print(f"Train: {X_train_encoded.shape}")
print(f"Test: {X_test_encoded.shape}")

# V√©rifier qu'on n'a plus d'object
remaining_objects = X_train_encoded.select_dtypes(include=['object']).columns.tolist()
print(f"\nColonnes object restantes: {remaining_objects}")
